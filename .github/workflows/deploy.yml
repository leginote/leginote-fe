name: Deploy to Oracle Cloud VM (on Pull Request)

on:
  workflow_dispatch:
  push:
    branches:
      - Statpan/issue6

env:
  PROJECT_DIR: /home/ubuntu/leginote-fe

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: leginote1

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js  # actions/setup-node 사용
        uses: actions/setup-node@v3
        with:
          node-version: '16'  # 사용할 Node.js 버전 명시

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.LEGINOTE1_SSH_KEY }}" > ~/.ssh/leginote1_ssh_key
          chmod 600 ~/.ssh/leginote1_ssh_key

      - name: Get Host Key and Add to known_hosts
        run: |
          ssh-keyscan -H -p ${{ secrets.LEGINOTE1_PORT }} ${{ secrets.LEGINOTE1_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Deploy to Oracle Cloud VM (Final Version)
        env:
          GIT_AUTH_TOKEN: ${{ secrets.LEGINOTE1_GIT_AUTH }}  # Secret에서 토큰 가져오기
          PROJECT_DIR: /home/ubuntu/leginote-fe

        run: |
          set -e  # 전체 Workflow에 적용
          set -x  # 전체 Workflow에 적용

          # rsync로 로컬에서 원격 서버로 파일 전송
          rsync -avz -e "ssh -i ~/.ssh/leginote1_ssh_key -p ${{ secrets.LEGINOTE1_PORT }} -o StrictHostKeyChecking=no" \
            --exclude='node_modules' \
            --exclude='.next' \
            --exclude='public' \
            --exclude='.git' \
            --progress \
            . ${{ secrets.LEGINOTE1_USER }}@${{ secrets.LEGINOTE1_HOST }}:"${PROJECT_DIR}"

          # SSH로 원격 서버에 접속하여 명령 실행
          ssh -i ~/.ssh/leginote1_ssh_key \
              -o UserKnownHostsFile=~/.ssh/known_hosts \
              -o StrictHostKeyChecking=no \
              -p ${{ secrets.LEGINOTE1_PORT }} \
              ${{ secrets.LEGINOTE1_USER }}@${{ secrets.LEGINOTE1_HOST }} \
              "bash -s" << EOF
              set -e
              set -x

              cd ${PROJECT_DIR}
              pwd

              # nvm 초기화 (nvm을 사용하는 경우)
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"

              # PATH 환경 변수 명시적으로 설정
              # nvm current 대신, 명시적인 Node.js 버전을 사용하는 것이 더 안정적입니다.
              export PATH="$NVM_DIR/versions/node/v20.18.3/bin:$PATH"

              # GitHub Package Registry 인증 설정
              echo "//npm.pkg.github.com/:_authToken=${GIT_AUTH_TOKEN}" > .npmrc
              chmod 600 .npmrc
              
              npm ci
              npm run build

              docker compose up -d --build
          EOF